---
name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build and push minitwit-image
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-image:latest
  #         cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-image:webbuildcache
  #         cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-image:webbuildcache,mode=max

  #     - name: Configure SSH
  #       run: |
  #         mkdir -p ~/.ssh/
  #         echo "$SSH_KEY" > ~/.ssh/do_ssh_key
  #         chmod 600 ~/.ssh/do_ssh_key
  #       env:
  #         SSH_KEY: ${{ secrets.SSH_KEY }}

  #     - name: Sync scripts file
  #       run: >
  #         scp -i ~/.ssh/do_ssh_key
  #         -o StrictHostKeyChecking=no
  #         -r ./scripts root@138.68.126.8:/minitwit
  #       env:
  #         SSH_KEY: ${{ secrets.SSH_KEY }}

  #     - name: Sync config files
  #       run: >
  #         scp -i ~/.ssh/do_ssh_key
  #         -o StrictHostKeyChecking=no
  #         -r ./config root@138.68.126.8:/minitwit
  #       env:
  #         SSH_KEY: ${{ secrets.SSH_KEY }}

  #     - name: Deploy to server
  #       # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
  #       run: >
  #         ssh root@138.68.126.8
  #         -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no
  #         '/minitwit/scripts/deploy.sh'

  # https://stackoverflow.com/a/74955554/10836486
  create-release:
    # needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest tag
        id: tag
        run: echo "test=$(git tag --sort=version:refname | tail -1)" >> "$GITHUB_OUTPUT"

      - name: Get next tag version
        id: semver
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.tag.outputs.test }}

      - name: Print
        run: |
          echo ${{ steps.semver.outputs.patch }}
          echo ${{ steps.tag.outputs.test }}

      # - name: Create release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.semver.outputs.patch }}
      #     release_name: Release v${{ steps.semver.outputs.patch }}
